import json

try:
    apikey = open("APIKEY.txt", "r").read()
    print("  API key found in APIKEY.txt")
except FileNotFoundError:
    apikey = input("Write api key and press enter: ")

apiurl = f"https://app.tolgee.io/v2/projects/688/export?format=JSON&splitByScope=false&splitByScopeDelimiter=~&splitByScopeDepth=0&filterState=UNTRANSLATED&filterState=TRANSLATED&filterState=REVIEWED&zip=true&ak={apikey}"

import os
try:
    import requests
except ImportError:
    os.system("pip install requests")
    import requests
import glob, time, shutil, zipfile


print()
print("-------------------------------------------------------")
print()
print("  Downloading updated translations...")

zipcontent = requests.get(apiurl)
open("langs.zip", "wb").write(zipcontent.content)

print("  Download complete!")
print()
print("-------------------------------------------------------")
print()
print("  Making a backup of the old files...")



file_equivalent = {
    "ar.json":    "ar",
    "ca.json":    "ca",
    "cs.json":    "cs",
    "da.json":    "da",
    "de.json":    "de",
    "el.json":    "el",
    "en.json":    "en",
    "es.json":    "es",
    "fi.json":    "fi",
    "he.json":    "he",
    "fr.json":    "fr",
    "hu.json":    "hu",
    "id.json":    "id",
    "it.json":    "it",
    "ja.json":    "ja",
    "ko.json":    "ko",
    "lt.json":    "lt",
    "lv.json":    "lv",
    "nb.json":    "nb",
    "nl.json":    "nl",
    "nn.json":    "nn",
    "pl.json":    "pl",
    "pt-PT.json": "pt_PT",
    "pt-BR.json": "pt_BR",
    "ru.json":    "ru",
    "sk.json":    "sk",
    "sr.json":    "sr",
    "sv.json":    "sv",
    "th.json":    "th",
    "tr.json":    "tr",
    "uk.json":    "ua",
    "vi.json":    "vi",
    "zh-Hant-TW.json": "zh_TW",
    "zh-Hans-CN.json": "zh_CN",
}



olddir = "lang_backup"+str(int(time.time()))
os.mkdir(olddir)
for file in glob.glob('lang_*.json'):
    shutil.move(file, olddir)

print(f"  Backup complete. The old files were moved to {olddir}")
print()
print("-------------------------------------------------------")
print()
print("  Extracting language files...")


zip_file = zipfile.ZipFile("langs.zip")
for name in zip_file.namelist():
    new_filename = f"lang_{file_equivalent[str(name)]}.json"
    try:
        zip_file.extract(name, "./")
        os.rename(name, new_filename)

        print(f"  Extracted {new_filename}")
    except KeyError as e:
        print(type(name))
        f = input(f"  The file {name} was not expected to be in here. Please write the name for the file. It should follow the following structure: lang_[CODE].json: ")
        zip_file.extract(f, "./")
        os.rename(f, new_filename)
        print(f"  Extracted {f}")
zip_file.close()
os.remove("langs.zip")

print("  Process complete!")
print()
print("-------------------------------------------------------")
print()
print("  Generatting translation done file...")


langPerc = {}
for lang in file_equivalent.values():
    if (lang == "en"): # FIXME: REMOVE this, after en lang includes truth translation
        langPerc[lang] = "100%"
        continue
    f = open(f"lang_{lang}.json", "r", encoding='utf-8')
    data = json.load(f)
    f.close()
    c = 0
    a = 0
    for key, value in data.items():
        c += 1
        if (value != None):
            a += 1
    langPerc[lang] = "{:.0%}".format(a / c)

f = open(f"translated_percentage.py", "w")
f.write(f"# Autogenerated file, do not modify it!!!\n\ntranslatedPercentage = {json.dumps(langPerc, indent=2)}")
f.close()


print("  Process complete!")
print()
print("-------------------------------------------------------")
print()
os.system("pause")